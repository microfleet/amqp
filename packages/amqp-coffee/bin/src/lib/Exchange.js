// Generated by CoffeeScript 2.6.1
(function() {
  // Exchange
  var Exchange, applyDefaults, debug, defaults, methods;

  debug = require('./config').debug('amqp:Exchange');

  ({methods} = require('./config').protocol);

  defaults = require('./defaults');

  applyDefaults = require('lodash/defaults');

  Exchange = class Exchange {
    constructor(channel, args, cb) {
      this.delete = this.delete.bind(this);
      this.bind = this.bind.bind(this);
      this.unbind = this.unbind.bind(this);
      if ((args.exchange == null) && (args.name != null)) {
        args.exchange = args.name;
        delete args['name'];
      }
      if (args.exchange == null) {
        if (cb != null) {
          cb("args.exchange is requried");
        }
        return;
      }
      this.exchangeOptions = applyDefaults(args, defaults.exchange);
      this.channel = channel;
      this.taskPush = channel.taskPush;
      if (cb != null) {
        cb(null, this);
      }
    }

    declare(args, cb) {
      var declareOptions;
      if ((args == null) && (cb == null)) {
        declareOptions = this.exchangeOptions;
      } else if (typeof args === 'function') {
        cb = args;
        args = {};
        declareOptions = this.exchangeOptions;
      } else {
        declareOptions = applyDefaults(args, this.exchangeOptions);
      }
      this.taskPush(methods.exchangeDeclare, declareOptions, methods.exchangeDeclareOk, cb);
      return this;
    }

    delete(args, cb) {
      var exchangeDeleteOptions;
      if (typeof args === 'function') {
        cb = args;
        args = {};
      }
      exchangeDeleteOptions = applyDefaults(args, defaults.exchangeDelete, {
        exchange: this.exchangeOptions.exchange
      });
      this.taskPush(methods.exchangeDelete, exchangeDeleteOptions, methods.exchangeDeleteOk, cb);
      return this;
    }

    bind(destExchange, routingKey, sourceExchange, cb) {
      var exchangeBindOptions, sourceExchangeName;
      if (typeof sourceExchange === 'string') {
        sourceExchangeName = sourceExchange;
      } else {
        cb = sourceExchange;
        sourceExchangeName = this.exchangeOptions.exchange;
      }
      exchangeBindOptions = {
        destination: destExchange,
        source: sourceExchangeName,
        routingKey: routingKey,
        arguments: {}
      };
      this.taskPush(methods.exchangeBind, exchangeBindOptions, methods.exchangeBindOk, cb);
      return this;
    }

    unbind(destExchange, routingKey, sourceExchange, cb) {
      var exchangeUnbindOptions, sourceExchangeName;
      if (typeof sourceExchange === 'string') {
        sourceExchangeName = sourceExchange;
      } else {
        cb = sourceExchange;
        sourceExchangeName = this.exchangeOptions.exchange;
      }
      exchangeUnbindOptions = {
        destination: destExchange,
        source: sourceExchangeName,
        routingKey: routingKey,
        arguments: {}
      };
      this.taskPush(methods.exchangeUnbind, exchangeUnbindOptions, methods.exchangeUnbindOk, cb);
      return this;
    }

  };

  module.exports = Exchange;

}).call(this);
